#
# ms-nfs41-client manual testing sequence, 2025-01-08
#
# Draft version, needs to be turned into automated tests
# if possible
#

#
# Notes:
# - Cygwin enviroment:
#   The following Cygwin packages must be installed for running the tests:
#   ---- snip ----
#   gcc-core
#   gcc-g++
#   clang
#   mingw64-i686-clang
#   mingw64-x86_64-clang
#   gdb
#   make
#   bmake
#   netpbm
#   git
#   subversion
#   cygport
#   dos2unix
#   libiconv-devel
#   libncurses-devel
#   libgmp-devel
#   libmpfr-devel
#   libmpc-devel
#   libintl-devel
#   libisl-devel
#   flex
#   bison
#   unzip
#   pax
#   tar
#   konsole
#   nedit
#   emacs
#   cygport
#   gettext
#   gettext-devel
#   ---- snip ----
#
# - MSYS2 environment:
#   - Install the env with:
#   $ mkdir -p download && cd download
#   $ wget 'https://github.com/msys2/msys2-installer/releases/download/2024-11-16/msys2-x86_64-20241116.exe'
#   $ chmod a+x msys2-x86_64-20241116.exe
#   $ ./msys2-x86_64-20241116 --default-answer --root 'C:\msys64' install
#   - The following MSYS2 packages should be installed for running the tests with MSYS2:
#   (install with $ pacman -S --noconfirm ${name_of_package} # (use space to separate package names)
#   ---- snip ----
#   base-devel
#   gcc
#   clang
#   sed
#   time
#   coreutils
#   util-linux
#   grep
#   sed
#   emacs
#   gdb
#   make
#   gettext
#   gettext-devel
#   git
#   subversion
#   flex
#   bison
#   unzip
#   pax
#   tar
#   libiconv-devel
#   ncurses-devel
#   gmp-devel
#   mpfr-devel
#   mpc-devel
#   isl-devel
#   procps-ng
#   libiconv-devel
#   ---- snip ----
#
# - Benchmarking/profiling should be done with the realtime virus checker
#   disabled, e.g. disable it like this from an "Adminstrator" terminal:
#   $ powershell -Command 'Set-MpPreference -DisableRealtimeMonitoring 1' #
#
# - Microsoft Compatibility Telemetry daemon should be disabled,
#   as it can ruin profiling runs.
#   The daemon can be disabled from a Cygwin Adminstrator shell like this:
#   ---- snip ----
#   regtool -i set '/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/DataCollection/AllowTelemetry' 0
#   ---- snip ----
#
# - A timeserver shoud be running on both Windows (NFSv4.2/NFSv4.1
#   client and NFSv4.2/NFSv4.1 server).
#   For example on Windows add timeserver 10.49.0.6 like this:
#   ---- snip ----
#   sc config w32time start=auto
#   sc start w32time
#   w32tm /config /update /manualpeerlist:10.49.0.6
#   ---- snip ----
#   (see https://stackoverflow.com/questions/22862236/how-to-sync-windows-time-from-a-ntp-time-server-in-command)
#   On Linux use xntpd or timesyncd (/etc/systemd/timesyncd.conf)
#
# - Start cygserver as admin before running tests
#   so SysV shared memory works:
#   ---- snip ----
#   cygserver-config
#   net start cygserver
#   sc query cygserver
#   ---- snip ----
#
# - Windows Kernel debugger setup:
#   1. Install "winsdksetup.exe" from
#     https://go.microsoft.com/fwlink/?linkid=2164145 on all machines
#     involved
#   2. Machine "A" runs ms-nfs41-client, and has the IPv4 address
#     10.49.202.87
#   3. Machine "B" runs the "kd" kernel debugger frontend, and has the
#     IPv4 address 10.49.202.231
#   4. Setup on machine "A":
#     $ PATH+=':/cygdrive/c/Program Files (x86)/Windows Kits/10/Debuggers/x64/'
#     $ bcdedit /dbgsettings net hostip:10.49.202.87 port:50000 key:1.1.1.1
#     $ kdnet 10.49.202.231 50000
#   5. Run kernel debugger frontend on machine "B":
#     $ PATH+=':/cygdrive/c/Program Files (x86)/Windows Kits/10/Debuggers/x64/'
#     $ kd -loga kdlog.log -k net:port=50000,key=1.1.1.1,target=10.49.202.87 #
#
# - Windows local crash dumps setup (for non-Cygwin apps)
#   (see https://learn.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps):
#   ---- snip -----
#   # enable crash dumps globally
#   regtool add '/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/Windows Error Reporting/LocalDumps'
#   regtool -i set '/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/Windows Error Reporting/LocalDumps/DumpType' 2
#   mkdir -p "$(cygpath -u "$(echo $LOCALAPPDATA)")/CrashDumps"
#   # list generated crash dumps
#   ls -la "$(cygpath -u "$(echo $LOCALAPPDATA)")/CrashDumps"
#   # get stack trace for crash dump "link.exe.1640.dmp"
#   PATH+=':/cygdrive/c/Program Files (x86)/Windows Kits/10/Debuggers/x64/'
#   cdb -z "${LOCALAPPDATA}\CrashDumps\link.exe.1640.dmp" -c '!analyze -v ; q'
#   ---- snip -----
#


#
# Tests for cp -p/mv/chmod/chgrp
# Testcases, all should print *ONLY* "OK" on stdout, nothing on stderr
---- snip ----
ksh93 -c 'builtin mv ; rm -f /tmp/x y ; touch /tmp/x ; mv /tmp/x y && print OK ; true'
ksh93 -c 'builtin mv ; rm -f /tmp/x y ; touch /tmp/x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f /tmp/x y ; touch /tmp/x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; cp -p /tmp/x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; cp -p x y && print OK ; true'
ksh93 -c 'builtin cp ; rm -f x y ; touch x ; /usr/bin/cp -p x y && print OK ; true'
ksh93 -c 'builtin id ; rm -f x ; touch x ; chown "$(id -u -n):$(id -g -n)" x && print OK'
ksh93 -c 'builtin id ; rm -f x ; touch x ; chgrp "$(id -g -n)" x && print OK'
---- snip ----


#
# Tests for groups
# (Add groups "cygwingrp1" and "cygwingrp2" to both Linux NFSv4 server
# and Windows machine, after that $ chgrp cygwingrp2 # should work)
#
---- snip ----
# "WINHOST1" is the Windows machine,
# "DERFWNB4966" is the Linux NFSv4 server:

# create two groups on the Windows machine
WINHOST1:~$ net localgroup cygwingrp1 /add
WINHOST1:~$ net localgroup cygwingrp2 /add

# add user "roland_mainz" to both new groups
WINHOST1:~$ net localgroup cygwingrp1 roland_mainz /add
WINHOST1:~$ net localgroup cygwingrp2 roland_mainz /add

# get gid from both groups
WINHOST1:~$ getent group cygwingrp1
cygwingrp1:S-1-5-21-3286904461-661230000-4220857270-1003:197611:
WINHOST1:~$ getent group cygwingrp2
cygwingrp2:S-1-5-21-3286904461-661230000-4220857270-1004:197612:

# add the two groups to the Linux NFSv4 server, including the gids
("197611" and "197612"):
root@DERFWNB4966:~# groupadd -g 197611 cygwingrp1
root@DERFWNB4966:~# groupadd -g 197612 cygwingrp2
root@DERFWNB4966:~# usermod -a -G cygwingrp1 roland_mainz
root@DERFWNB4966:~# usermod -a -G cygwingrp2 roland_mainz
---- snip ---

#
# Test for group ACLs
#
Testcase:
-------- snip --------
# cd to a NFS >= v4.1 filesystem
$ rm -f test1.txt
$ touch test1.txt
$ icacls test1.txt /grant:r 'cygwingrp1:(WDAC)' /t /c
Bearbeitete Datei: test1.txt
1 Dateien erfolgreich verarbeitet, bei 0 Dateien ist ein Verarbeitungsfehler aufgetreten.

$ icacls test1.txt /grant:r 'cygwingrp2:(WDAC)' /t /c
Bearbeitete Datei: test1.txt
1 Dateien erfolgreich verarbeitet, bei 0 Dateien ist ein Verarbeitungsfehler aufgetreten.

# expectation:
# getfact output should contain both "cygwingrp1" and "cygwingrp2":
$ getfacl test1.txt
user::r--
group::r--
group:cygwingrp1:r--
group:cygwingrp2:r--
mask::r--
other::r--
-------- snip --------

or one-liner:
-------- snip --------
# cd to a NFS >= v4.1 filesystem
# getfact output should contain both "cygwingrp1" and "cygwingrp2"
ksh93 -c 'rm -f test1.txt ; touch test1.txt ; icacls test1.txt /grant:r "cygwingrp1:(WDAC)" /grant:r "cygwingrp2:(WDAC)" /t /c ; getfacl test1.txt | grep -C 20 --colour -E "cygwingrp[12]"'
-------- snip --------

#
# Test for "Generic Write" ACL:
#
$ ksh93 -c 'set -o xtrace ; rm -f test1.txt ; touch test1.txt ; icacls test1.txt /grant "siegfried_wulsch:(GW)" ; icacls test1.txt | grep --colour -E "siegfried_wulsch.+GW"'
# Expectation:
The ACL entry for user "siegfried_wulsch" should have the "GW" flag set

#
# Test for default (inheritance) ACLs:
#
mkdir test1
cd test1
icacls . /grant "cygwingrp2:(OI)(CI)(IO)(GR)"
touch mytestfile1.txt
icacls mytestfile1.txt | grep --colour -E 'cygwingrp2.+GR'
# file "mytestfile1.txt" must have the "GR" flag set

#
# Compile each of the following package
# on a NFS >= v4.1 share, and run each build in parallel/sequence
# multiple times on one or multiple mounts
#
# ./nfs_mount -p -o sec=sys T derfwnb4966_ipv6:/net_tmpfs2
# ./nfs_mount -p -o sec=sys R derfwnb4966_ipv6:/net_tmpfs2/test2
#


#
# ksh93 (ast-ksh)
#

#
# build ast-ksh ksh93 1.0.10 with UNC support enabled
# (see ms-nfs41-client/cygwin/cygwin_ksh93/cygwin_ksh93.readme for
# instructions how to build a Cygwin package)
#
git clone -b 'v1.0.10' https://github.com/ksh93/ksh.git
cd ksh
git config --global --add safe.directory "$PWD"
# add patch so UNC path support is enabled (e.g. "cd cd //derfwnb4966_ipv6linklocal@2049/nfs4/net_tmpfs")
patch -p1 <'../cygwin/cygwin_ksh93/ksh_1_0_8_libast_Cygwin_set_PATH_LEADING_SLASHES_for_UNC_paths.patch'
sed -i -r 's/mkfifo.+?(-m [[:digit:]]+)/mkfifo /g' ./src/cmd/INIT/package.sh ./bin/package
# repeat:
rm -Rf arch
time bash -c 'export SHELL=/bin/bash HOSTTYPE="cygwin.i386-64"; /bin/bash ./bin/package make CC="/usr/bin/cc -std=gnu17" CCFLAGS="-Os -g" SHELL="$SHELL" HOSTTYPE="$HOSTTYPE"' 2>&1 | tee buildlog.log


#
# bash
#

# build bash with very long PWD (${#PWD} == 1053 is known to work
# if the nfs server supports path lengths > 1024)
typeset -i i
typeset longpath=''
for ((i=0 ; ${#longpath} < 1024 ; i++)) ; do
    longpath+="longpath__$i/"
done
mkdir -p "$longpath" && cd "$longpath"
printf "path_len=%d\n" "${#PWD}"

git clone https://git.savannah.gnu.org/git/bash.git
cd bash/
# Cygwin: workaround for configure using cp -p where ln -s should be used
# (this is an automake/autoconf issue, they should trust Cygwin and not use
# ancient workarounds for issues which no longer exists)
(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name configure) )
# run configure
./configure --with-curses
# repeat:
make clean && make -j4 all


#
# ms-nfs41-client
#
git clone https://github.com/kofemann/ms-nfs41-client.git
cd ms-nfs41-client
export PATH+=":/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/"
# repeat:
# clean
rm -vRf $(find . -name Debug -o -name Release)
# build
MSBuild.exe build.vc19/nfs41-client.sln -t:Build  -p:Configuration=Debug -p:Platform=x64
MSBuild.exe build.vc19/nfs41-client.sln -t:Build  -p:Configuration=Release -p:Platform=x64


#
# gcc
#
# * Notes:
# - The build requires that there are at least 131 characters left in
#   the path, e.g. $ echo $((260-${#PWD} > 131)) # should be "1",
#   otherwise the buildcan "randomly" fail with internal gcc errors.
#   Note that PWD might be the UNC path.
#   ---- snip ----
#   $ cd gcc
#   $ ksh93 -c 'integer pnl pnl_max ; find . | while read pn ; do pnl=${#pn} ; (( pnl_max=fmax(pnl, pnl_max) )) ; done ; printf "max_path_length=%d\n" pnl_max'
#   max_path_length=131
#   ---- snip ----
# - Full build can easily take ~~16 hours minutes
# - Option "--disable-libstdcxx-pch" is used due to bug
#   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=114381 ("(Sporadic)
#   crash generating x86_64-pc-cygwin/bits/extc++.h.gch/O2g.gch")
#
git clone -b 'releases/gcc-13.2.0' git://gcc.gnu.org/git/gcc.git
cd gcc/
# Cygwin: workaround for configure using cp -p where ln -s should be used
# (this is an automake/autoconf issue, they should trust Cygwin and not use
# ancient workarounds for issues which no longer exists)
(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name configure) )
# run configure
./configure --disable-libstdcxx-pch
# repeat:
make -j4 clean
(yes | make -j32 all)


#
# libnfs
#

# get sources and patch them
git clone https://github.com/sahlberg/libnfs.git
# fix "nfs_v4.c:436:29: error: array subscript has type 'char' [-Werror=char-subscripts]"
sed -i -E 's/if \(isdigit\(\*buf\)\) \{/if (isdigit((int)*buf)) {/' libnfs/lib/nfs_v4.c

cd libnfs
git config --global --add safe.directory "$PWD"
autoupdate
ln -s /usr/share/libtool/build-aux/ltmain.sh .
autoreconf || true
automake --add-missing
autoreconf
./configure --without-libkrb5 --enable-utils
make -j8 all


#
# Run Cygwin installer from NFS >= v4.1 share
#
wget 'https://www.cygwin.com/setup-x86_64.exe'
chmod a+rx setup-x86_64.exe
# check whether this will open the Cygwin installer window
./setup-x86_64 --no-admin


#
# Subversion checkout:
#
# Currently fails like this:
# ---- snip ----
# $ svn --version
# svn, version 1.14.2 (r1899510)
#   compiled May 20 2023, 11:51:30 on x86_64-pc-cygwin
#
# $ svn checkout https://svn.FreeBSD.org/base/head/share/man
# A    man/man4
# A    man/man4/tcp.4
# A    man/man4/ndis.4
# A    man/man4/Makefile
# A    man/man4/altq.4
# A    man/man4/miibus.4
# A    man/man4/vlan.4
# A    man/man4/ng_macfilter.4
# A    man/man4/mn.4
# A    man/man4/ossl.4
# A    man/man4/ktls.4
# A    man/man4/ftwd.4
# A    man/man4/inet6.4
# A    man/man4/crypto.4
# A    man/man4/rtsx.4
# A    man/man4/isp.4
# svn: E200030: sqlite[S11]: database disk image is malformed
# svn: E200042: Additional errors:
# svn: E200030: sqlite[S11]: database disk image is malformed
# svn: E200030: sqlite[S11]: database disk image is malformed
# svn: E200030: sqlite[S11]: database disk image is malformed
# ---- snip ----
#
# Workaround is to mount the NFS filesystem with the "writethru"
# option, e.g.
# $ /sbin/nfs_mount -o rw,writethru 'j' derfwpc5131:/export/home/rmainz #
#
# Test:
svn checkout https://svn.FreeBSD.org/base/head/share/man


#
# NATIVE Windows git clone (NOT Cygwin /usr/bin/git!)
#
# Currently fails like this:
# ---- snip ----
# $ '/cygdrive/c/Program Files/Git/cmd/git' --version
# git version 2.45.2.windows.1
# $ '/cygdrive/c/Program Files/Git/cmd/git' clone https://github.com/kofemann/ms-nfs41-client.git
# Cloning into 'ms-nfs41-client'...
# remote: Enumerating objects: 6558, done.
# remote: Counting objects: 100% (318/318), done.
# remote: Compressing objects: 100% (172/172), done.
# remote: Total 6558 (delta 191), reused 233 (delta 141), pack-reused 6240 (from 1)
# Receiving objects: 100% (6558/6558), 2.43 MiB | 4.66 MiB/s, done.
# fatal: premature end of pack file, 655 bytes missing
# warning: die() called many times. Recursion error or racy threaded death!
# fatal: fetch-pack: invalid index-pack output
# ---- snip ----
# Workaround is to mount the NFS filesystem with the "writethru"
# OR "nocache" option, e.g.
# $ /sbin/nfs_mount -o rw,writethru 'j' derfwpc5131:/export/home/rmainz #
#
# Test:
'/cygdrive/c/Program Files/Git/cmd/git' clone https://github.com/kofemann/ms-nfs41-client.git


#
# Run parallel make job on NFS >= v4.1 filesystem (/cygdrive/n/xxx/)
#
cd /cygdrive/n/xxx/
time ksh93 $msnfs41clientgitroot/tests/fstest_make_numtree1/fstest_make_numtree1.ksh93 all


#
# Run DrMemory with log dir on NFS >= v4.1 filesystem
#
cd /cygdrive/n/xxx/
drmemory -batch -check_uninit_all -strict_bitops -logdir "$(cygpath -w "$PWD")" -- "$(cygpath -w /sbin/nfs_mount)"

#
# Run Windows tar (/cygdrive/c/Windows/system32/tar) tests
# on NFS >= v4.1 filesystem
#
# Notes:
# - Win10 /cygdrive/c/Windows/system32/tar uses write-only handles
#   which should turn-off write caching. If we do not turn off
#   write caching in this case "wintartest_seq001.bash" will fail
#   like this (might require a few hundred cycles, and only fails
#   on a freshly booted machine):
#   -------- snip --------
#   #### Test cycle 11 (usingbzip=true,tarfileonlocaldisk=true):
#   x 1seq.txt
#   x 100seq.txt
#   x 1040seq.txt
#   x 5000seq.txt
#   x 10000seq.txt
#   x 12000seq.txt
#   #### Test cycle 12 (usingbzip=true,tarfileonlocaldisk=true):
#   x 1seq.txt
#   x 100seq.txt
#   x 1040seq.txt
#   x 5000seq.txt
#   x 10000seq.txt
#   x 12000seq.txt
#   ## ERROR: Zero byte in plain /usr/bin/seq output 10000seq.txt found:
#   ---- snip ----
#   000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   000030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   000040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   ---- snip ----
#   -------- snip --------
#
#

cd /cygdrive/n/xxx/
bash /usr/share/msnfs41client/tests/misc/wintartests/wintartest_seq001.bash

cd /cygdrive/n/xxx/
bash /usr/share/msnfs41client/tests/misc/wintartest_comparewinvsgnu001.bash mytarfile.tar.bz2

#
# Test "silly rename"
#
# Deleing a file which is still in use (i.e. open fd) causes a NFS client
# to do a "silly rename", e.g. "foo" gets renamed to ".nfsXXXX" until
# the client does not use it any more.
#
# The NFS server has a weekly cron job removing files called ".nfs*" which
# are more than a week old to deal with .nfs* files from NFS clients which
# crashed while having deleted files open.
#
# The test here comes in two variations, one using "rm myfile" (which triggers
# Cygwin "silly rename" (see newlib-cygwin/winsup/cygwin/syscalls.cc,
# function |try_to_bin()|), and one using $ cmd /C "del myfile" #, which
# bypasses the Cygwin code
bash -c 'set -o errexit ; rm -Rf sillytestdir ; mkdir sillytestdir ; cd sillytestdir ; touch sillytest ; ( command exec {n}<"sillytest" ; printf "fd=%d\n" $n ; sleep 10) & sleep 1 ; ls -la ; cmd /C "del sillytest" ; ls -la ; if [[ "$(ls -1 .nfs*)" != "" ]] ; then echo "# test OK" ; else echo "# test FAILED" ; fi ; wait'
bash -c 'set -o errexit ; rm -Rf sillytestdir ; mkdir sillytestdir ; cd sillytestdir ; touch sillytest ; ( command exec {n}<"sillytest" ; printf "fd=%d\n" $n ; sleep 10) & sleep 1 ; ls -la ; rm -f sillytest ; ls -la ; if [[ "$(ls -1 .nfs*)" != "" ]] ; then echo "# test OK" ; else echo "# test FAILED" ; fi ; wait'

#
# EOF.
